package com.jsv.editor;
import com.jsv.lang.vm.type.decltype;
import com.jsv.lang.vm.type.decltypeelement;
import com.jsv.data.Variant;
import com.jsv.lang.vm.type.parameterPair;
import com.jsv.lang.vm.type.parameterPairs;

//#############################################
//## file: Parser.java
//## Generated by Byacc/j
//#############################################
/**
 * BYACC/J Semantic Value for parser: Parser
 * This class provides some of the functionality
 * of the yacc/C 'union' directive
 */
public class ParserVal
{
/**
 * integer value of this 'union'
 */
public int ival;

/**
 * double value of this 'union'
 */
public double dval;

/**
 * string value of this 'union'
 */
public String sval;

/**
 * object value of this 'union'
 */
public Object obj;

public Variant var;
public decltypeelement decl;
public decltype declt;
public parameterPair pair;
public parameterPairs pairs;
public float fval;

//#############################################
//## C O N S T R U C T O R S
//#############################################

/**
 * Initialize me without a value
 */
public ParserVal()
{
}

public ParserVal(Variant pvar)
{
  var=pvar;
}
public ParserVal(decltypeelement pdecl)
{
  decl=pdecl;
}
public ParserVal(decltype pdeclt)
{
  declt=pdeclt;
}
public ParserVal(float pfval)
{
  fval=pfval;
}
public ParserVal(parameterPair p)
{
  pair = p;	
}
public ParserVal(parameterPairs p)
{
  pairs = p;	
}

/**
 * Initialize me as an int
 */
public ParserVal(int val)
{
  ival=val;
}

/**
 * Initialize me as a double
 */
public ParserVal(double val)
{
  dval=val;
}

/**
 * Initialize me as a string
 */
public ParserVal(String val)
{
  sval=val;
}

/**
 * Initialize me as an Object
 */
public ParserVal(Object val)
{
  obj=val;
}
}//end class

//#############################################
//## E N D    O F    F I L E
//#############################################
